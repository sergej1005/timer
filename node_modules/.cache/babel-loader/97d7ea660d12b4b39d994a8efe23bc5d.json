{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sergej\\\\Desktop\\\\secunda\\\\stopwatch\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { Observable, Subject } from 'rxjs';\nimport { map, buffer, debounceTime, filter, takeUntil } from 'rxjs/operators';\nimport { Controls } from './components/Controls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [state, setState] = useState('stop');\n  const [time, setTime] = useState(0);\n  const stop$ = useMemo(() => new Subject(), []);\n  const click$ = useMemo(() => new Subject(), []);\n\n  const start = () => {\n    setState('start');\n  };\n\n  const stop = useCallback(() => {\n    setTime(0);\n    setState('stop');\n  }, []);\n  const reset = useCallback(() => {\n    setTime(0);\n  }, []);\n  const wait = useCallback(() => {\n    click$.next();\n    setState('wait');\n    click$.next();\n  }, []);\n  useEffect(() => {\n    const doubleClick$ = click$.pipe(buffer(click$.pipe(debounceTime(300))), map(list => list.length), filter(value => value >= 2));\n    const timer$ = new Observable(observer => {\n      let count = 0;\n      const intervalId = setInterval(() => {\n        observer.next(count += 1);\n        console.log(count);\n      }, 1000);\n      return () => {\n        clearInterval(intervalId);\n      };\n    });\n    const subscribtion$ = timer$.pipe(takeUntil(doubleClick$)).pipe(takeUntil(stop$)).subscribe({\n      next: () => {\n        if (state === 'start') {\n          setTime(prev => prev + 1);\n        }\n      }\n    });\n    return () => {\n      subscribtion$.unsubscribe();\n    };\n  }, [state]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"stopwatch\",\n    children: /*#__PURE__*/_jsxDEV(Controls, {\n      time: time,\n      start: start,\n      stop: stop,\n      reset: reset,\n      wait: wait\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"0IQU16C84sCHLg5tc5Q71zhkrg4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/sergej/Desktop/secunda/stopwatch/src/App.jsx"],"names":["React","useCallback","useEffect","useState","useMemo","Observable","Subject","map","buffer","debounceTime","filter","takeUntil","Controls","App","state","setState","time","setTime","stop$","click$","start","stop","reset","wait","next","doubleClick$","pipe","list","length","value","timer$","observer","count","intervalId","setInterval","console","log","clearInterval","subscribtion$","subscribe","prev","unsubscribe"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  map,\n  buffer,\n  debounceTime,\n  filter,\n  takeUntil,\n} from 'rxjs/operators';\n\nimport { Controls } from './components/Controls';\n\nconst App = () => {\n  const [state, setState] = useState('stop');\n  const [time, setTime] = useState(0);\n\n  const stop$ = useMemo(() => new Subject(), []);\n  const click$ = useMemo(() => new Subject(), []);\n\n  const start = () => {\n    setState('start');\n  };\n\n  const stop = useCallback(() => {\n    setTime(0);\n    setState('stop');\n  }, []);\n\n  const reset = useCallback(() => {\n    setTime(0);\n  }, []);\n\n  const wait = useCallback(() => {\n    click$.next();\n    setState('wait');\n    click$.next();\n  }, []);\n\n  useEffect(() => {\n    const doubleClick$ = click$.pipe(\n      buffer(click$.pipe(debounceTime(300))),\n      map((list) => list.length),\n      filter((value) => value >= 2),\n    );\n    const timer$ = new Observable((observer) => {\n      let count = 0;\n      const intervalId = setInterval(() => {\n        observer.next(count += 1);\n        console.log(count);\n      }, 1000);\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    });\n\n    const subscribtion$ = timer$\n      .pipe(takeUntil(doubleClick$))\n      .pipe(takeUntil(stop$))\n      .subscribe({\n        next: () => {\n          if (state === 'start') {\n            setTime((prev) => prev + 1);\n          }\n        },\n      });\n\n    return (() => {\n      subscribtion$.unsubscribe();\n    });\n  }, [state]);\n\n  return (\n    <section className=\"stopwatch\">\n      <Controls\n        time={time}\n        start={start}\n        stop={stop}\n        reset={reset}\n        wait={wait}\n      />\n    </section>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}